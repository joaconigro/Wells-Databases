// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Wells.Persistence;

#nullable disable

namespace Wells.Persistence.Migrations.SqliteMigrations
{
    [DbContext(typeof(SqliteDbContext))]
    partial class SqliteDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.1");

            modelBuilder.Entity("Wells.Model.ExternalFile", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("WellId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("WellId");

                    b.ToTable("ExternalFiles", (string)null);
                });

            modelBuilder.Entity("Wells.Model.FlnaAnalysis", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<double>("Benzene")
                        .HasColumnType("REAL");

                    b.Property<double>("C10_C12")
                        .HasColumnType("REAL");

                    b.Property<double>("C12_C16")
                        .HasColumnType("REAL");

                    b.Property<double>("C16_C21")
                        .HasColumnType("REAL");

                    b.Property<double>("C17_Pristano")
                        .HasColumnType("REAL");

                    b.Property<double>("C18_Fitano")
                        .HasColumnType("REAL");

                    b.Property<double>("C21_C35")
                        .HasColumnType("REAL");

                    b.Property<double>("C6_C8")
                        .HasColumnType("REAL");

                    b.Property<double>("C8_C10")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<double>("Dro")
                        .HasColumnType("REAL");

                    b.Property<double>("DynamicViscosity")
                        .HasColumnType("REAL");

                    b.Property<double>("Ethylbenzene")
                        .HasColumnType("REAL");

                    b.Property<double>("Gro")
                        .HasColumnType("REAL");

                    b.Property<double>("Mro")
                        .HasColumnType("REAL");

                    b.Property<double>("RealDensity")
                        .HasColumnType("REAL");

                    b.Property<double>("Tolueno")
                        .HasColumnType("REAL");

                    b.Property<string>("WellId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Xylenes")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("WellId");

                    b.ToTable("FlnaAnalyses", (string)null);
                });

            modelBuilder.Entity("Wells.Model.Measurement", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<double>("FlnaDepth")
                        .HasColumnType("REAL");

                    b.Property<double>("FlnaThickness")
                        .HasColumnType("REAL");

                    b.Property<double>("WaterDepth")
                        .HasColumnType("REAL");

                    b.Property<string>("WellId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("WellId");

                    b.ToTable("Measurements", (string)null);
                });

            modelBuilder.Entity("Wells.Model.Precipitation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<double>("Millimeters")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Precipitations", (string)null);
                });

            modelBuilder.Entity("Wells.Model.SoilAnalysis", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<double>("Acenafthene")
                        .HasColumnType("REAL");

                    b.Property<double>("Acenaphthylene")
                        .HasColumnType("REAL");

                    b.Property<double>("Anthracene")
                        .HasColumnType("REAL");

                    b.Property<double>("Arsenic")
                        .HasColumnType("REAL");

                    b.Property<double>("Benzene")
                        .HasColumnType("REAL");

                    b.Property<double>("BenzoAAnthracene")
                        .HasColumnType("REAL");

                    b.Property<double>("BenzoAPyrene")
                        .HasColumnType("REAL");

                    b.Property<double>("BenzoBFluoranthene")
                        .HasColumnType("REAL");

                    b.Property<double>("BenzoGhiPerylene")
                        .HasColumnType("REAL");

                    b.Property<double>("BenzoKFluoranthene")
                        .HasColumnType("REAL");

                    b.Property<double>("C10_C12Aliphatic")
                        .HasColumnType("REAL");

                    b.Property<double>("C10_C12Aromatic")
                        .HasColumnType("REAL");

                    b.Property<double>("C12_C16Aliphatic")
                        .HasColumnType("REAL");

                    b.Property<double>("C12_C16Aromatic")
                        .HasColumnType("REAL");

                    b.Property<double>("C16_C21Aliphatic")
                        .HasColumnType("REAL");

                    b.Property<double>("C16_C21Aromatic")
                        .HasColumnType("REAL");

                    b.Property<double>("C21_C35Aliphatic")
                        .HasColumnType("REAL");

                    b.Property<double>("C21_C35Aromatic")
                        .HasColumnType("REAL");

                    b.Property<double>("C6_C8Aliphatic")
                        .HasColumnType("REAL");

                    b.Property<double>("C6_C8Aromatic")
                        .HasColumnType("REAL");

                    b.Property<double>("C8_C10Aliphatic")
                        .HasColumnType("REAL");

                    b.Property<double>("C8_C10Aromatic")
                        .HasColumnType("REAL");

                    b.Property<double>("Cadmium")
                        .HasColumnType("REAL");

                    b.Property<double>("Copper")
                        .HasColumnType("REAL");

                    b.Property<double>("Crysene")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<double>("DibenzoAhAnthracene")
                        .HasColumnType("REAL");

                    b.Property<double>("Dro")
                        .HasColumnType("REAL");

                    b.Property<double>("Ethylbenzene")
                        .HasColumnType("REAL");

                    b.Property<double>("Fenanthrene")
                        .HasColumnType("REAL");

                    b.Property<double>("Fluoranthene")
                        .HasColumnType("REAL");

                    b.Property<double>("Fluorene")
                        .HasColumnType("REAL");

                    b.Property<double>("Gro")
                        .HasColumnType("REAL");

                    b.Property<double>("Humidity")
                        .HasColumnType("REAL");

                    b.Property<double>("Indeno123CdPyrene")
                        .HasColumnType("REAL");

                    b.Property<double>("Lead")
                        .HasColumnType("REAL");

                    b.Property<double>("Mercury")
                        .HasColumnType("REAL");

                    b.Property<double>("Mro")
                        .HasColumnType("REAL");

                    b.Property<double>("Naphthalene")
                        .HasColumnType("REAL");

                    b.Property<double>("Nickel")
                        .HasColumnType("REAL");

                    b.Property<double>("OilsAndFats")
                        .HasColumnType("REAL");

                    b.Property<double>("Ph")
                        .HasColumnType("REAL");

                    b.Property<double>("Pyrene")
                        .HasColumnType("REAL");

                    b.Property<double>("Selenium")
                        .HasColumnType("REAL");

                    b.Property<double>("Tolueno")
                        .HasColumnType("REAL");

                    b.Property<double>("TotalChrome")
                        .HasColumnType("REAL");

                    b.Property<double>("TotalHydrocarbonsEpa8015")
                        .HasColumnType("REAL");

                    b.Property<double>("TotalHydrocarbonsTnrcc1005")
                        .HasColumnType("REAL");

                    b.Property<double>("TotalXylene")
                        .HasColumnType("REAL");

                    b.Property<string>("WellId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("XyleneO")
                        .HasColumnType("REAL");

                    b.Property<double>("XylenePm")
                        .HasColumnType("REAL");

                    b.Property<double>("Zinc")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("WellId");

                    b.ToTable("SoilAnalyses", (string)null);
                });

            modelBuilder.Entity("Wells.Model.WaterAnalysis", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<double>("Acenafthene")
                        .HasColumnType("REAL");

                    b.Property<double>("Acenaphthylene")
                        .HasColumnType("REAL");

                    b.Property<double>("Anthracene")
                        .HasColumnType("REAL");

                    b.Property<double>("Arsenic")
                        .HasColumnType("REAL");

                    b.Property<double>("Benzene")
                        .HasColumnType("REAL");

                    b.Property<double>("BenzoAAnthracene")
                        .HasColumnType("REAL");

                    b.Property<double>("BenzoAPyrene")
                        .HasColumnType("REAL");

                    b.Property<double>("BenzoBFluoranthene")
                        .HasColumnType("REAL");

                    b.Property<double>("BenzoGhiPerylene")
                        .HasColumnType("REAL");

                    b.Property<double>("BenzoKFluoranthene")
                        .HasColumnType("REAL");

                    b.Property<double>("BicarbonateAlkalinity")
                        .HasColumnType("REAL");

                    b.Property<double>("Cadmium")
                        .HasColumnType("REAL");

                    b.Property<double>("Calcium")
                        .HasColumnType("REAL");

                    b.Property<double>("CarbonateAlkalinity")
                        .HasColumnType("REAL");

                    b.Property<double>("Chlorides")
                        .HasColumnType("REAL");

                    b.Property<double>("Cobalt")
                        .HasColumnType("REAL");

                    b.Property<double>("Conductivity")
                        .HasColumnType("REAL");

                    b.Property<double>("Copper")
                        .HasColumnType("REAL");

                    b.Property<double>("Crysene")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<double>("DibenzoAhAnthracene")
                        .HasColumnType("REAL");

                    b.Property<double>("Dro")
                        .HasColumnType("REAL");

                    b.Property<double>("DryWaste")
                        .HasColumnType("REAL");

                    b.Property<double>("Ethylbenzene")
                        .HasColumnType("REAL");

                    b.Property<double>("Fenanthrene")
                        .HasColumnType("REAL");

                    b.Property<double>("Fluoranthene")
                        .HasColumnType("REAL");

                    b.Property<double>("Fluorene")
                        .HasColumnType("REAL");

                    b.Property<double>("Fluorides")
                        .HasColumnType("REAL");

                    b.Property<double>("Gro")
                        .HasColumnType("REAL");

                    b.Property<double>("Indeno123CdPyrene")
                        .HasColumnType("REAL");

                    b.Property<double>("Lead")
                        .HasColumnType("REAL");

                    b.Property<double>("Magnesium")
                        .HasColumnType("REAL");

                    b.Property<double>("Mercury")
                        .HasColumnType("REAL");

                    b.Property<double>("Mro")
                        .HasColumnType("REAL");

                    b.Property<double>("Naphthalene")
                        .HasColumnType("REAL");

                    b.Property<double>("Nickel")
                        .HasColumnType("REAL");

                    b.Property<double>("Nitrates")
                        .HasColumnType("REAL");

                    b.Property<double>("Ph")
                        .HasColumnType("REAL");

                    b.Property<double>("Potassium")
                        .HasColumnType("REAL");

                    b.Property<double>("Pyrene")
                        .HasColumnType("REAL");

                    b.Property<double>("Sodium")
                        .HasColumnType("REAL");

                    b.Property<double>("Sulfates")
                        .HasColumnType("REAL");

                    b.Property<double>("Tolueno")
                        .HasColumnType("REAL");

                    b.Property<double>("TotalChrome")
                        .HasColumnType("REAL");

                    b.Property<double>("TotalHydrocarbonsEpa8015")
                        .HasColumnType("REAL");

                    b.Property<double>("TotalHydrocarbonsTnrcc1005")
                        .HasColumnType("REAL");

                    b.Property<double>("TotalSulfur")
                        .HasColumnType("REAL");

                    b.Property<double>("TotalXylene")
                        .HasColumnType("REAL");

                    b.Property<string>("WellId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("XyleneO")
                        .HasColumnType("REAL");

                    b.Property<double>("XylenePm")
                        .HasColumnType("REAL");

                    b.Property<double>("Zinc")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("WellId");

                    b.ToTable("WaterAnalyses", (string)null);
                });

            modelBuilder.Entity("Wells.Model.Well", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<double>("Bottom")
                        .HasColumnType("REAL");

                    b.Property<bool>("Exists")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Height")
                        .HasColumnType("REAL");

                    b.Property<double>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("WellType")
                        .HasColumnType("INTEGER");

                    b.Property<double>("X")
                        .HasColumnType("REAL");

                    b.Property<double>("Y")
                        .HasColumnType("REAL");

                    b.Property<double>("Z")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Wells", (string)null);
                });

            modelBuilder.Entity("Wells.Model.ExternalFile", b =>
                {
                    b.HasOne("Wells.Model.Well", "Well")
                        .WithMany("Files")
                        .HasForeignKey("WellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Well");
                });

            modelBuilder.Entity("Wells.Model.FlnaAnalysis", b =>
                {
                    b.HasOne("Wells.Model.Well", "Well")
                        .WithMany("FlnaAnalyses")
                        .HasForeignKey("WellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Well");
                });

            modelBuilder.Entity("Wells.Model.Measurement", b =>
                {
                    b.HasOne("Wells.Model.Well", "Well")
                        .WithMany("Measurements")
                        .HasForeignKey("WellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Well");
                });

            modelBuilder.Entity("Wells.Model.SoilAnalysis", b =>
                {
                    b.HasOne("Wells.Model.Well", "Well")
                        .WithMany("SoilAnalyses")
                        .HasForeignKey("WellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Well");
                });

            modelBuilder.Entity("Wells.Model.WaterAnalysis", b =>
                {
                    b.HasOne("Wells.Model.Well", "Well")
                        .WithMany("WaterAnalyses")
                        .HasForeignKey("WellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Well");
                });

            modelBuilder.Entity("Wells.Model.Well", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("FlnaAnalyses");

                    b.Navigation("Measurements");

                    b.Navigation("SoilAnalyses");

                    b.Navigation("WaterAnalyses");
                });
#pragma warning restore 612, 618
        }
    }
}
